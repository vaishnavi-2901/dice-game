import { ComponentPropsWithRef } from 'react';
import { BaseObject, KnownTarget, WebTarget } from '../types';
import { Styled as StyledInstance } from './constructWithOptions';
declare const baseStyled: <Target extends WebTarget, InjectedProps extends object = BaseObject>(tag: Target) => StyledInstance<"web", Target, Target extends KnownTarget ? ComponentPropsWithRef<Target> & InjectedProps : InjectedProps, BaseObject>;
declare const styled: (<Target extends WebTarget, InjectedProps extends object = BaseObject>(tag: Target) => StyledInstance<"web", Target, Target extends KnownTarget ? ComponentPropsWithRef<Target> & InjectedProps : InjectedProps, BaseObject>) & {
    object: StyledInstance<"web", "object", import("react").DetailedHTMLProps<import("react").ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>, BaseObject>;
    a: StyledInstance<"web", "a", import("react").DetailedHTMLProps<import("react").AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, BaseObject>;
    abbr: StyledInstance<"web", "abbr", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    address: StyledInstance<"web", "address", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    area: StyledInstance<"web", "area", import("react").DetailedHTMLProps<import("react").AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>, BaseObject>;
    article: StyledInstance<"web", "article", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    aside: StyledInstance<"web", "aside", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    audio: StyledInstance<"web", "audio", import("react").DetailedHTMLProps<import("react").AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>, BaseObject>;
    b: StyledInstance<"web", "b", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    base: StyledInstance<"web", "base", import("react").DetailedHTMLProps<import("react").BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>, BaseObject>;
    bdi: StyledInstance<"web", "bdi", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    bdo: StyledInstance<"web", "bdo", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    big: StyledInstance<"web", "big", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    blockquote: StyledInstance<"web", "blockquote", import("react").DetailedHTMLProps<import("react").BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>, BaseObject>;
    body: StyledInstance<"web", "body", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>, BaseObject>;
    br: StyledInstance<"web", "br", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLBRElement>, HTMLBRElement>, BaseObject>;
    button: StyledInstance<"web", "button", import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, BaseObject>;
    canvas: StyledInstance<"web", "canvas", import("react").DetailedHTMLProps<import("react").CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>, BaseObject>;
    caption: StyledInstance<"web", "caption", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    cite: StyledInstance<"web", "cite", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    code: StyledInstance<"web", "code", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    col: StyledInstance<"web", "col", import("react").DetailedHTMLProps<import("react").ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>, BaseObject>;
    colgroup: StyledInstance<"web", "colgroup", import("react").DetailedHTMLProps<import("react").ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>, BaseObject>;
    data: StyledInstance<"web", "data", import("react").DetailedHTMLProps<import("react").DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>, BaseObject>;
    datalist: StyledInstance<"web", "datalist", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>, BaseObject>;
    dd: StyledInstance<"web", "dd", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    del: StyledInstance<"web", "del", import("react").DetailedHTMLProps<import("react").DelHTMLAttributes<HTMLModElement>, HTMLModElement>, BaseObject>;
    details: StyledInstance<"web", "details", import("react").DetailedHTMLProps<import("react").DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>, BaseObject>;
    dfn: StyledInstance<"web", "dfn", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    dialog: StyledInstance<"web", "dialog", import("react").DetailedHTMLProps<import("react").DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>, BaseObject>;
    div: StyledInstance<"web", "div", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, BaseObject>;
    dl: StyledInstance<"web", "dl", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDListElement>, HTMLDListElement>, BaseObject>;
    dt: StyledInstance<"web", "dt", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    em: StyledInstance<"web", "em", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    embed: StyledInstance<"web", "embed", import("react").DetailedHTMLProps<import("react").EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>, BaseObject>;
    fieldset: StyledInstance<"web", "fieldset", import("react").DetailedHTMLProps<import("react").FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>, BaseObject>;
    figcaption: StyledInstance<"web", "figcaption", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    figure: StyledInstance<"web", "figure", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    footer: StyledInstance<"web", "footer", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    form: StyledInstance<"web", "form", import("react").DetailedHTMLProps<import("react").FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>, BaseObject>;
    h1: StyledInstance<"web", "h1", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, BaseObject>;
    h2: StyledInstance<"web", "h2", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, BaseObject>;
    h3: StyledInstance<"web", "h3", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, BaseObject>;
    h4: StyledInstance<"web", "h4", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, BaseObject>;
    h5: StyledInstance<"web", "h5", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, BaseObject>;
    h6: StyledInstance<"web", "h6", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, BaseObject>;
    header: StyledInstance<"web", "header", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    hgroup: StyledInstance<"web", "hgroup", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    hr: StyledInstance<"web", "hr", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHRElement>, HTMLHRElement>, BaseObject>;
    html: StyledInstance<"web", "html", import("react").DetailedHTMLProps<import("react").HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>, BaseObject>;
    i: StyledInstance<"web", "i", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    iframe: StyledInstance<"web", "iframe", import("react").DetailedHTMLProps<import("react").IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>, BaseObject>;
    img: StyledInstance<"web", "img", import("react").DetailedHTMLProps<import("react").ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, BaseObject>;
    input: StyledInstance<"web", "input", import("react").DetailedHTMLProps<import("react").InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, BaseObject>;
    ins: StyledInstance<"web", "ins", import("react").DetailedHTMLProps<import("react").InsHTMLAttributes<HTMLModElement>, HTMLModElement>, BaseObject>;
    kbd: StyledInstance<"web", "kbd", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    keygen: StyledInstance<"web", "keygen", import("react").DetailedHTMLProps<import("react").KeygenHTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    label: StyledInstance<"web", "label", import("react").DetailedHTMLProps<import("react").LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, BaseObject>;
    legend: StyledInstance<"web", "legend", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>, BaseObject>;
    li: StyledInstance<"web", "li", import("react").DetailedHTMLProps<import("react").LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, BaseObject>;
    link: StyledInstance<"web", "link", import("react").DetailedHTMLProps<import("react").LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>, BaseObject>;
    main: StyledInstance<"web", "main", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    map: StyledInstance<"web", "map", import("react").DetailedHTMLProps<import("react").MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>, BaseObject>;
    mark: StyledInstance<"web", "mark", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    menu: StyledInstance<"web", "menu", import("react").DetailedHTMLProps<import("react").MenuHTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    menuitem: StyledInstance<"web", "menuitem", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    meta: StyledInstance<"web", "meta", import("react").DetailedHTMLProps<import("react").MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>, BaseObject>;
    meter: StyledInstance<"web", "meter", import("react").DetailedHTMLProps<import("react").MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>, BaseObject>;
    nav: StyledInstance<"web", "nav", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    noscript: StyledInstance<"web", "noscript", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    ol: StyledInstance<"web", "ol", import("react").DetailedHTMLProps<import("react").OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>, BaseObject>;
    optgroup: StyledInstance<"web", "optgroup", import("react").DetailedHTMLProps<import("react").OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>, BaseObject>;
    option: StyledInstance<"web", "option", import("react").DetailedHTMLProps<import("react").OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>, BaseObject>;
    output: StyledInstance<"web", "output", import("react").DetailedHTMLProps<import("react").OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>, BaseObject>;
    p: StyledInstance<"web", "p", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, BaseObject>;
    param: StyledInstance<"web", "param", import("react").DetailedHTMLProps<import("react").ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>, BaseObject>;
    picture: StyledInstance<"web", "picture", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    pre: StyledInstance<"web", "pre", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLPreElement>, HTMLPreElement>, BaseObject>;
    progress: StyledInstance<"web", "progress", import("react").DetailedHTMLProps<import("react").ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>, BaseObject>;
    q: StyledInstance<"web", "q", import("react").DetailedHTMLProps<import("react").QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>, BaseObject>;
    rp: StyledInstance<"web", "rp", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    rt: StyledInstance<"web", "rt", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    ruby: StyledInstance<"web", "ruby", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    s: StyledInstance<"web", "s", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    samp: StyledInstance<"web", "samp", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    script: StyledInstance<"web", "script", import("react").DetailedHTMLProps<import("react").ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>, BaseObject>;
    section: StyledInstance<"web", "section", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    select: StyledInstance<"web", "select", import("react").DetailedHTMLProps<import("react").SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, BaseObject>;
    small: StyledInstance<"web", "small", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    source: StyledInstance<"web", "source", import("react").DetailedHTMLProps<import("react").SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>, BaseObject>;
    span: StyledInstance<"web", "span", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, BaseObject>;
    strong: StyledInstance<"web", "strong", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    style: StyledInstance<"web", "style", import("react").DetailedHTMLProps<import("react").StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>, BaseObject>;
    sub: StyledInstance<"web", "sub", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    summary: StyledInstance<"web", "summary", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    sup: StyledInstance<"web", "sup", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    table: StyledInstance<"web", "table", import("react").DetailedHTMLProps<import("react").TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>, BaseObject>;
    tbody: StyledInstance<"web", "tbody", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, BaseObject>;
    td: StyledInstance<"web", "td", import("react").DetailedHTMLProps<import("react").TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>, BaseObject>;
    textarea: StyledInstance<"web", "textarea", import("react").DetailedHTMLProps<import("react").TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, BaseObject>;
    tfoot: StyledInstance<"web", "tfoot", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, BaseObject>;
    th: StyledInstance<"web", "th", import("react").DetailedHTMLProps<import("react").ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>, BaseObject>;
    thead: StyledInstance<"web", "thead", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, BaseObject>;
    time: StyledInstance<"web", "time", import("react").DetailedHTMLProps<import("react").TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>, BaseObject>;
    tr: StyledInstance<"web", "tr", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>, BaseObject>;
    track: StyledInstance<"web", "track", import("react").DetailedHTMLProps<import("react").TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>, BaseObject>;
    u: StyledInstance<"web", "u", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    ul: StyledInstance<"web", "ul", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLUListElement>, HTMLUListElement>, BaseObject>;
    use: StyledInstance<"web", "use", import("react").SVGProps<SVGUseElement>, BaseObject>;
    var: StyledInstance<"web", "var", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    video: StyledInstance<"web", "video", import("react").DetailedHTMLProps<import("react").VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>, BaseObject>;
    wbr: StyledInstance<"web", "wbr", import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, BaseObject>;
    circle: StyledInstance<"web", "circle", import("react").SVGProps<SVGCircleElement>, BaseObject>;
    clipPath: StyledInstance<"web", "clipPath", import("react").SVGProps<SVGClipPathElement>, BaseObject>;
    defs: StyledInstance<"web", "defs", import("react").SVGProps<SVGDefsElement>, BaseObject>;
    ellipse: StyledInstance<"web", "ellipse", import("react").SVGProps<SVGEllipseElement>, BaseObject>;
    foreignObject: StyledInstance<"web", "foreignObject", import("react").SVGProps<SVGForeignObjectElement>, BaseObject>;
    g: StyledInstance<"web", "g", import("react").SVGProps<SVGGElement>, BaseObject>;
    image: StyledInstance<"web", "image", import("react").SVGProps<SVGImageElement>, BaseObject>;
    line: StyledInstance<"web", "line", import("react").SVGLineElementAttributes<SVGLineElement>, BaseObject>;
    linearGradient: StyledInstance<"web", "linearGradient", import("react").SVGProps<SVGLinearGradientElement>, BaseObject>;
    marker: StyledInstance<"web", "marker", import("react").SVGProps<SVGMarkerElement>, BaseObject>;
    mask: StyledInstance<"web", "mask", import("react").SVGProps<SVGMaskElement>, BaseObject>;
    path: StyledInstance<"web", "path", import("react").SVGProps<SVGPathElement>, BaseObject>;
    pattern: StyledInstance<"web", "pattern", import("react").SVGProps<SVGPatternElement>, BaseObject>;
    polygon: StyledInstance<"web", "polygon", import("react").SVGProps<SVGPolygonElement>, BaseObject>;
    polyline: StyledInstance<"web", "polyline", import("react").SVGProps<SVGPolylineElement>, BaseObject>;
    radialGradient: StyledInstance<"web", "radialGradient", import("react").SVGProps<SVGRadialGradientElement>, BaseObject>;
    rect: StyledInstance<"web", "rect", import("react").SVGProps<SVGRectElement>, BaseObject>;
    stop: StyledInstance<"web", "stop", import("react").SVGProps<SVGStopElement>, BaseObject>;
    svg: StyledInstance<"web", "svg", import("react").SVGProps<SVGSVGElement>, BaseObject>;
    text: StyledInstance<"web", "text", import("react").SVGTextElementAttributes<SVGTextElement>, BaseObject>;
    tspan: StyledInstance<"web", "tspan", import("react").SVGProps<SVGTSpanElement>, BaseObject>;
};
export default styled;
export { StyledInstance };
/**
 * This is the type of the `styled` HOC.
 */
export type Styled = typeof styled;
/**
 * Use this higher-order type for scenarios where you are wrapping `styled`
 * and providing extra props as a third-party library.
 */
export type LibraryStyled<LibraryProps extends object = BaseObject> = <Target extends WebTarget>(tag: Target) => typeof baseStyled<Target, LibraryProps>;
